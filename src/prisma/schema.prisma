// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  name              String
  firstName         String?
  lastName          String?
  avatar            String?
  phoneNumber       String?
  isEmailVerified   Boolean   @default(false)
  isPhoneVerified   Boolean   @default(false)
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  passwordChangedAt DateTime?
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime? // Soft delete

  // Relations
  roleId           String
  role             Role              @relation(fields: [roleId], references: [id])
  emailTokens      EmailToken[]
  passwordResets   PasswordReset[]
  uploadedFiles    File[]
  notifications    Notification[]
  activityLogs     ActivityLog[]
  sessions         UserSession[]
  preferences      UserPreference?

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  resource    String   // e.g., 'user', 'role', 'file'
  action      String   // e.g., 'create', 'read', 'update', 'delete'
  createdAt   DateTime @default(now())

  // Relations
  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model EmailToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  type      TokenType
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_tokens")
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model File {
  id           String    @id @default(uuid())
  originalName String
  filename     String    @unique
  mimetype     String
  size         Int
  path         String
  uploadedById String
  isPublic     Boolean   @default(false)
  downloadCount Int      @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? // Soft delete

  uploadedBy User @relation(fields: [uploadedById], references: [id])

  @@map("files")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  readAt    DateTime?
  data      Json?            // Additional notification data
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivityLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String   // e.g., 'LOGIN', 'CREATE_USER', 'UPDATE_PROFILE'
  resource    String?  // What was affected
  resourceId  String?  // ID of affected resource
  ipAddress   String?
  userAgent   String?
  metadata    Json?    // Additional log data
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

model UserSession {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  device    String?
  ipAddress String?
  userAgent String?
  isActive  Boolean   @default(true)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  lastUsed  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserPreference {
  id                    String  @id @default(uuid())
  userId                String  @unique
  theme                 String  @default("light") // light, dark, auto
  language              String  @default("en")
  timezone              String  @default("UTC")
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  marketingEmails       Boolean @default(false)
  twoFactorNotifications Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model ApiKey {
  id          String    @id @default(uuid())
  name        String
  key         String    @unique
  hashedKey   String
  permissions Json?     // Specific API permissions
  lastUsed    DateTime?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("api_keys")
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
}